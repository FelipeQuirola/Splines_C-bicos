import sympy as sym
from IPython.display import display

def cubic_spline(xs: list[float], ys: list[float]) -> list[sym.Symbol]:
    """
    Cubic spline interpolation ``S``. Every two points are interpolated by a cubic polynomial
    ``S_j`` of the form ``S_j(x) = a_j + b_j(x - x_j) + c_j(x - x_j)^2 + d_j(x - x_j)^3.``

    xs must be different but not necessarily ordered nor equally spaced.

    ## Parameters
    - xs, ys: points to be interpolated

    ## Return
    - List of symbolic expressions for the cubic spline interpolation.
    """

    # Sort points by x values
    points = sorted(zip(xs, ys), key=lambda x: x[0])

    # Separate the sorted points into xs and ys
    xs = [x for x, _ in points]
    ys = [y for _, y in points]

    n = len(points) - 1  # Number of splines

    # Calculate the distances between contiguous xs
    h = [xs[i + 1] - xs[i] for i in range(n)]

    # Calculate alpha values
    alpha = [0] * (n + 1)
    for i in range(1, n):
        alpha[i] = (3 / h[i]) * (ys[i + 1] - ys[i]) - (3 / h[i - 1]) * (ys[i] - ys[i - 1])

    # Initialize l, u, and z
    l = [1] * (n + 1)
    u = [0] * (n + 1)
    z = [0] * (n + 1)

    # Calculate l, u, and z
    for i in range(1, n):
        l[i] = 2 * (xs[i + 1] - xs[i - 1]) - h[i - 1] * u[i - 1]
        u[i] = h[i] / l[i]
        z[i] = (alpha[i] - h[i - 1] * z[i - 1]) / l[i]

    # Initialize c, b, d, and a
    l[n] = 1
    z[n] = 0
    c = [0] * (n + 1)
    b = [0] * n
    d = [0] * n
    a = [0] * n

    x = sym.Symbol("x")
    splines = []

    # Calculate the coefficients for each spline
    for j in range(n - 1, -1, -1):
        c[j] = z[j] - u[j] * c[j + 1]
        b[j] = (ys[j + 1] - ys[j]) / h[j] - h[j] * (c[j + 1] + 2 * c[j]) / 3
        d[j] = (c[j + 1] - c[j]) / (3 * h[j])
        a[j] = ys[j]
        print(j, a[j], b[j], c[j], d[j])
        S_j = a[j] + b[j] * (x - xs[j]) + c[j] * (x - xs[j])**2 + d[j] * (x - xs[j])**3
        splines.append(S_j)

    splines.reverse()
    return splines

# Example usage
xs = [0, 1, 2, 3, 4]
ys = [1, 2, 0, 2, 1]
splines = cubic_spline(xs, ys)
for spline in splines:
    display(spline)
