import sympy as sym
import matplotlib.pyplot as plt
import numpy as np

# La funci√≥n cubic_spline_clamped tal como se proporciona
def cubic_spline_clamped(xs, ys, d0, dn):
    points = sorted(zip(xs, ys), key=lambda x: x[0])  # sort points by x
    xs = [x for x, _ in points]
    ys = [y for _, y in points]
    n = len(points) - 1  # number of splines
    h = [xs[i + 1] - xs[i] for i in range(n)]  # distances between  contiguous xs

    alpha = [0] * (n + 1)  # prealloc
    alpha[0] = 3 / h[0] * (ys[1] - ys[0]) - 3 * d0
    alpha[-1] = 3 * dn - 3 / h[n - 1] * (ys[n] - ys[n - 1])

    for i in range(1, n):
        alpha[i] = 3 / h[i] * (ys[i + 1] - ys[i]) - 3 / h[i - 1] * (ys[i] - ys[i - 1])

    l = [2 * h[0]]
    u = [0.5]
    z = [alpha[0] / l[0]]

    for i in range(1, n):
        l += [2 * (xs[i + 1] - xs[i - 1]) - h[i - 1] * u[i - 1]]
        u += [h[i] / l[i]]
        z += [(alpha[i] - h[i - 1] * z[i - 1]) / l[i]]

    l.append(h[n - 1] * (2 - u[n - 1]))
    z.append((alpha[n] - h[n - 1] * z[n - 1]) / l[n])
    c = [0] * (n + 1)  # prealloc
    c[-1] = z[-1]

    x = sym.Symbol("x")
    splines = []
    for j in range(n - 1, -1, -1):
        c[j] = z[j] - u[j] * c[j + 1]
        b = (ys[j + 1] - ys[j]) / h[j] - h[j] * (c[j + 1] + 2 * c[j]) / 3
        d = (c[j + 1] - c[j]) / (3 * h[j])
        a = ys[j]
        S = a + b * (x - xs[j]) + c[j] * (x - xs[j]) ** 2 + d * (x - xs[j]) ** 3

        splines.append(S)
    splines.reverse()
    return splines

# Datos de la tabla
curves = {
    "Curva 1": {
        "x": [1, 2, 3, 6, 8, 10, 13, 17],
        "y": [3.0, 3.7, 3.9, 4.2, 5.7, 6.6, 7.1, 4.5],
        "d0": 1.0,
        "dn": -0.67
    },
    "Curva 2": {
        "x": [17, 20, 23, 24, 25, 27, 27.7],
        "y": [4.5, 7.0, 6.1, 5.6, 5.8, 5.2, 4.1],
        "d0": 3.0,
        "dn": -4.0
    },
    "Curva 3": {
        "x": [27.7, 28, 29, 30],
        "y": [3.0, 4.1, 4.3, 3.0],
        "d0": 0.33,
        "dn": -1.5
    }
}

# Datos
fig, ax = plt.subplots(figsize=(10, 6))

x = sym.Symbol("x")
for label, data in curves.items():
    xs = data["x"]
    ys = data["y"]
    d0 = data["d0"]
    dn = data["dn"]

    splines = cubic_spline_clamped(xs, ys, d0, dn)

    # Graficar puntos originales
    ax.plot(xs, ys, 'o', label=f'{label} Points')

    # Graficar las splines
    for S, (x0, x1) in zip(splines, zip(xs, xs[1:])):
        spline_func = sym.lambdify(x, S)
        x_vals = np.linspace(x0, x1, 100)
        y_vals = spline_func(x_vals)
        ax.plot(x_vals, y_vals, label=f'{label} Spline')

ax.set_xlabel('x')
ax.set_ylabel('f(x)')
ax.legend()
ax.grid(True)
plt.show()
